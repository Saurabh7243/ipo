<%- include('navbar/sidebar') %>
<%- include('./utils/enum.ejs') %>

  <!DOCTYPE html>
  <html lang="en">

  <head>
    <meta charset="UTF-8" />
    <script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />

    <link rel="stylesheet" href="../public/css/dashboard.css" type="text/css">

    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>

    <title>Dashboard</title>
  </head>

  <body>
    <div class="pcoded-main-container">
      <div class="pcoded-wrapper">
        <div class="pcoded-content">
          <div class="pcoded-inner-content">
            <div class="main-body">
              <div class="page-wrapper">
                <div class="page-header">
                  <div class="page-block">
                    <div class="row align-items-center">
                      <div class="col-md-12">
                        <div class="page-header-title">
                          <h5 class="m-b-10">Ipo Listing</h5>
                          <div style="margin-top: 5px; text-align: center;" class="d-flex">
                            
                            <div style="margin: 5px; font-size: medium;"><h6 class="d-flex">Cron Job Update: <span style="margin-left: 8px; margin-right: 8px; margin-top: 3px;" id="socketData"></span> </h6></div>
                            <div class="d-flex" style="margin-top: -2px;">
                              <%- include('./utils/cronJobButton.ejs') %>
                            </div>
                          </div>

                          <div>
                            
                          </div>
                        </div>
                        
                      </div>
                    </div>
                  </div>
                </div>

                <div class="col-xl-12">
                  <div class="card">
                    <div class="card-header">
                      <%- include('forms/addIpo') %>
                    </div>
                    <div class="card-body table-border-style">
                      <div class="table-responsive">
                        <table class="table ">
                          <thead>
                            <tr>
                              <th style="width: 50%;">Company Name</th>
                              <!-- <th>Display Name</th> -->
                              <th>Start Date</th>
                              <th>End Date</th>
                              <th>Type</th>
                              <th>Exchanged</th>
                              <th>Action</th>
                            </tr>
                          </thead>
                          <tbody id="data-table-body">
                            <!-- Data will be inserted here -->
                          </tbody>
                        </table>
                        <nav>
                          <ul class="pagination" id="pagination-controls">
                            <!-- Pagination buttons will be inserted here -->
                          </ul>
                        </nav>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- for delete confirmation -->
  <div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
      <div class="modal-dialog">
          <div class="modal-content">
              <div class="modal-header">
                  <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                  <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                      <span aria-hidden="true">&times;</span>
                  </button>
              </div>
              <div class="modal-body">
                  Are you sure you want to delete this item?
              </div>
              <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                  <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
              </div>
          </div>
      </div>
  </div>
  <!-- end delete confirmation -->

    <script>
      const rowsPerPage = 20;
      let currentPage = 1;
      let data = [];
      let token = localStorage.getItem("token");
      let deleteId;
      if (!token) {
        console.error("No token found");
        window.location.href = '/'
      }

      const socket = io();

      socket.on('updateData', (data) => {
      document.getElementById('socketData').innerHTML = `        
        <p>${data.timestamp}</p>
      `;
    });

      async function fetchData() {
        try {
          const response = await fetch("/ipo/getAll", {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
          if (response.ok) {
            const jsonData = await response.json();

            if (jsonData.name === "TokenExpiredError") {
              window.location.href = "/";
              return;
            }

            data = jsonData.getAll;
            displayTable(data, currentPage);
            setupPagination(data);
          } else {
            console.error("Error fetching data:", response.statusText);
          }
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      }

      function displayTable(data, page) {

        const tableBody = document.getElementById("data-table-body");
        tableBody.innerHTML = "";
        const start = (page - 1) * rowsPerPage;
        const end = start + rowsPerPage;
        const paginatedData = data.slice(start, end);

        paginatedData.forEach((item) => {
          const row = document.createElement("tr");
          row.className = item.IsActive ? '' : 'inactive-row';
          let exist = null

          const rowClass = getRowClass(item.TimeLine?.StartDate, item.TimeLine?.EndDate, item.TimeLine?.ListingDate);

          // Define color styles based on the class
          const colorStyles = {
            issueOpen: "background-color: #e6f9e7;",
            issueCloseButNotListing: "background-color: #f3f3cb;",
            issueListing: "background-color: #daf3f6;",
            issueNoClass: "background-color: white;",
            issueCloseToday: "background-color: #ffd2cc;", //#fcc0b8
          };
          const style = colorStyles[rowClass] || '';
          debugger
          row.innerHTML = `
          <td style="${style}" >${item.CompanyName}</td>
          <td style="${style}" >${item?.TimeLine?.StartDate ? item.TimeLine?.StartDate : 'N/A'}</td>
          <td style="${style}" >${item?.TimeLine?.EndDate ? item.TimeLine?.EndDate : 'N/A'}</td>
          <td style="${style}" >${TypeEnum[item.Type]}</td>
          <td style="${style}" >${ExchangedEnum[item.Exchanged]}</td>

          <td style="${style}" class="d-flex align-items-center">

            <form action="/ipoDetail/get/${item.IpoId}" method="GET">
              <button class="btn  btn-link p-0" onClick="viewIpoDetails(${item.IpoId})">
                <i class="fa fa-eye" style="border: none; color: blue; cursor: pointer;"></i>
              </button>
            </form>

            <button class="btn btn-link p-0" onClick="softDelete(${item.IpoId})">
              <i class="fa fa-trash" style="border: none; color: blue; cursor: pointer;"></i>
            </button>

            <div class="">
              <label class="switch">
                <input type="checkbox" onClick="activeInActive(${item.IpoId},${item.IsActive})" class="btn-sm" ${item.IsActive ? 'checked' : ''}>
                <span class="slider"></span>
                ${item.IsActive ? 'Active' : 'Inactive'}
              </label>
            </div>
          </td>
        `;
          tableBody.appendChild(row);
        });
      }

      function getRowClass(startDate, endDate, listingDate) {
            debugger
            const today = new Date().setHours(0, 0, 0, 0);
            const start = new Date(startDate).setHours(0, 0, 0, 0);
            const end = new Date(endDate).setHours(0, 0, 0, 0);
            const listing = new Date(listingDate).setHours(0, 0, 0, 0);
            const IsActive = false

            if (today >= start && today < end) {
              return "issueOpen";
            } else if (today === end) {
              return "issueCloseToday";
            } else if (today === listing) {
              return "issueListing";
            } else if (today > end && today < listing) {
              return "issueCloseButNotListing";
            } 
            return "issueNoClass";
            }

      async function activeInActive(id, status) {
        debugger
        const reqData = {
          id: id,
          status: status
        }
        try {
          const response = await fetch(`/ipo/active`, {
            method: "POST",
            headers: {
              Authorization: `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(reqData)
          });

          console.log(response);
          if (response.ok) {
            fetchData();
          } else {
            console.error("Error deleting data:", response.statusText);
          }
        } catch (error) {
          console.error("Error deleting data:", error);
        }
      }

      function setupPagination(data) {
        const paginationControls = document.getElementById(
          "pagination-controls"
        );
        paginationControls.innerHTML = "";
        const pageCount = Math.ceil(data.length / rowsPerPage);

        if (pageCount <= 1) return;

        const prevLi = document.createElement("li");
        prevLi.className = `page-item ${currentPage === 1 ? "disabled" : ""}`;
        prevLi.innerHTML = `
        <button class="page-link" aria-label="Previous" onclick="changePage(${currentPage - 1
          })">
          <span aria-hidden="true">&laquo;</span>
        </button>
      `;
        paginationControls.appendChild(prevLi);

        for (let i = 1; i <= pageCount; i++) {
          const li = document.createElement("li");
          li.className = `page-item ${i === currentPage ? "active" : ""}`;
          li.innerHTML = `
          <button class="page-link" onclick="changePage(${i})">${i}</button>
        `;
          paginationControls.appendChild(li);
        }

        const nextLi = document.createElement("li");
        nextLi.className = `page-item ${currentPage === pageCount ? "disabled" : ""
          }`;
        nextLi.innerHTML = `
        <button class="page-link" aria-label="Next" onclick="changePage(${currentPage + 1
          })">
          <span aria-hidden="true">&raquo;</span>
        </button>
      `;
        paginationControls.appendChild(nextLi);
      }

      function changePage(page) {
        if (page < 1 || page > Math.ceil(data.length / rowsPerPage)) return;
        currentPage = page;
        displayTable(data, page);
        setupPagination(data);
      }

      function softDelete(id) {
          deleteId = id;
          $('#deleteModal').modal('show');
      }

      document.getElementById('confirmDelete').addEventListener('click', async () => {
          if (!deleteId) return;
          try {
              const response = await fetch(`/ipo/delete/${deleteId}`, {
                  method: 'POST',
                  headers: {
                      'Authorization': `Bearer ${token}`
                  }
              });

              if (response.ok) {
                  fetchData();
              } else {
                  console.error("Error deleting data:", response.statusText);
              }
          } catch (error) {
              console.error("Error deleting data:", error);
          } finally {
              $('#deleteModal').modal('hide');
          }
      });

      document.addEventListener("DOMContentLoaded", () => {
        const addIpoForm = document.getElementById("addIpoForm");
        const modalElement = $("#myModal");
        addIpoForm.addEventListener("submit", async (event) => {
          event.preventDefault();
          const formData = new FormData(addIpoForm);

          try {
            const response = await fetch("/ipo/add", {
              method: "POST",
              headers: {
                Authorization: `Bearer ${token}`,
              },
              body: formData,
            });

            if (response.ok) {
              modalElement.modal("hide");
              fetchData();
              addIpoForm.reset();
            } else {
              console.error("Error submitting form:", response.statusText);
            }
          } catch (error) {
            console.error("Error submitting form:", error);
          }
        });
        fetchData();
      });

      async function viewIpoDetails(id) {
        console.log(id)
        debugger
        try {
          const response = await fetch(`/ipoDetail/get/${id}`, {
            method: "GET",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          });
          if (response.ok) {
            const jsonData = await response.json();
            console.log("Data from fetch viewIpoDetails func ========", jsonData);

            if (jsonData.name === "TokenExpiredError") {
              window.location.href = "/";
              return;
            }

          } else {
            console.error("Error fetching data:", response.statusText);
          }
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      }
 
      fetchData();
    </script>
  </body>

  </html>